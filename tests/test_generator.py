import os
import types
from parameterized import parameterized
from unittest import TestCase
from swagger_django_generator.generator import Generator

# The specs that are commented out currently fails to be parsed.
# Since I am using an existing parser, there is not mut I can do about
# it at this stage. Just leaving it here for completeness' sake.
ALL_TEST_SPECIFICATIONS = [
    "tests/resources/allOfTest.yaml",
    "tests/resources/binaryDataTest.json",
    "tests/resources/allOfTest.yaml",
    "tests/resources/binaryDataTest.json",
    # "tests/resources/discriminatorTest.json",
    "tests/resources/duplicateOperationIds.yaml",
    "tests/resources/fileResponseTest.json",
    "tests/resources/globalConsumesAndProduces.json",
    "tests/resources/globalSecurity.json",
    "tests/resources/markdown.yaml",
    # "tests/resources/pathWithHtmlEntity.yaml",
    "tests/resources/petstore.json",
    "tests/resources/petstore.yaml",
    "tests/resources/petstore-bash.json",
    "tests/resources/petstore-orig.json",
    # "tests/resources/petstore-security-test.yaml",
    # "tests/resources/petstore-vendor-mime.yaml",
    # "tests/resources/petstore-with-fake-endpoints-models-for-testing.yaml",
    "tests/resources/postBodyTest.json",
    "tests/resources/requiredTest.json",
    "tests/resources/responseCodeTest.yaml",
    "tests/resources/responseHeaderTest.yaml",
    "tests/resources/responseSelectionTest.json",
    # "tests/resources/v1beta3.json",
    # "tests/resources/wordnik.json",
    # "tests/resources/wordnik.yaml",
]

class GeneratorTests(TestCase):

    def setUp(self):
        self.generator = Generator()

    @parameterized.expand(ALL_TEST_SPECIFICATIONS)
    def test_file_parsing(self, spec_path):
        self.generator.load_specification(spec_path)

    @parameterized.expand(ALL_TEST_SPECIFICATIONS)
    def test_that_generated_code_compiles(self, spec_path):
        """
        Checks that the code generated by the generator can be compiled.
        This only guarantees syntactical correctness.
        :param spec_path: The spec to base the code generation on
        :return:
        """
        self.generator.load_specification(spec_path)

        for func in [
            self.generator.generate_urls,
            self.generator.generate_schemas,
            self.generator.generate_views,
            self.generator.generate_stubs,
            ]:
            generated_code = func()
            self.assertIsInstance(compile(generated_code,
                                          os.path.basename(spec_path),
                                          "exec"),
                                  types.CodeType)

    def tearDown(self):
        pass

